user nginx;
worker_processes auto;

error_log	/var/log/error.log warn;
pid		/var/run/nginx.pid;

events {

	worker_connections 1024;
}

http {

	sendfile on;
	tcp_nopush on;
	keepalive_timeout 65;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	gzip on;
	gzip_http_version 1.0;
	gzip_proxied any;
	gzip_min_length 500;
	gzip_disable "MSIE [1-6]\.";
	gzip_types text/plain text/xml text/css
	text/comma-separated-values
	text/javascript
	application/x-javascript
	application/atom+xml;

	# don't send the nginx version number in error pages and Server header
	server_tokens off;

	# config to don't allow the browser to render the page inside an frame or iframe
	# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
	# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
	# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
	add_header X-Frame-Options SAMEORIGIN;

	# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
	# to disable content-type sniffing on some browsers.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
	# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
	# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
	add_header X-Content-Type-Options nosniff;

	# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
	# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
	# this particular website if it was disabled by the user.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	add_header X-XSS-Protection "1; mode=block";

	# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
	# you can tell the browser that it can only download content from the domains you explicitly allow
	# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	# https://www.owasp.org/index.php/Content_Security_Policy
	# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
	# directives for css and js(if you have inline css or js, you will need to keep it too).
	# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
	#add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' //ssl.google-analytics.com //maxcdn.bootstrapcdn.com //cdnjs.cloudflare.com //fonts.googleapis.com; img-src 'self' https://ssl.google-analytics.com; style-src 'self' 'unsafe-inline' //fonts.googleapis.com; font-src 'self' //themes.googleusercontent.com; frame-src; object-src 'none'";

	# enabling Public Key Pinning Extension for HTTP (HPKP)
	# https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning
	# tool for checking and generating proper certificates: https://report-uri.io/home/tools
	# to generate use on of these:
	# $ openssl rsa  -in my-website.key -outform der -pubout | openssl dgst -sha256 -binary | base64
	# $ openssl req  -in my-website.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
	# $ openssl x509 -in my-website.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | base64
	add_header Public-Key-Pins 'pin-sha256="base64+info1="; max-age=31536000' always;

	# redirect configurations
	include /etc/nginx/conf.d/redirect.conf;

	# Configuration for the server [https request]
	server {

		listen 443 ssl http2 default_server;
		listen [::]:443 ssl http2 default_server ipv6only=on;
		server_name	www.nalam.me;
		keepalive_timeout 70;
		rewrite ^/(.*)/$ /$1 permanent;

		ssl on;
		ssl_certificate		/etc/ssl/www.nalam.me/cert.crt;
		ssl_certificate_key	/etc/ssl/www.nalam.me/privkey.key;
		ssl_trusted_certificate /etc/ssl/www.nalam.me/gd.trusted.crt;
		# enable session resumption to improve https performance
		# http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
		ssl_session_cache shared:SSL:50m;
		ssl_session_timeout 1d;
		ssl_session_tickets off;

		# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
		ssl_dhparam /etc/ssl/www.nalam.me/dhparam.pem;

		# enables server-side protection from BEAST attacks
		# http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
		ssl_prefer_server_ciphers on;

		# disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

		# ciphers chosen for forward secrecy and compatibility
		# http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
		ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

		# enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
		# http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
		resolver 8.8.8.8 8.8.4.4;
		ssl_stapling on;
		ssl_stapling_verify on;

		# config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
		# to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
		# also https://hstspreload.org/
		add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

		access_log /var/log/nginx/access.log main;

		error_page	403	/403.html;
		location = /403.html {
			root /var/www;
		}

		error_page	404	/404.html;
		location = /404.html { 
			root /var/www;
		}

		location / {

			autoindex on;
			root /var/www;
			try_files $uri $uri/index.html /index.html;

			access_log  /var/logs/nalam.access.log;
			error_log   /var/logs/nalam.error.log;
			
			#deny 109.77.51.158;
			#allow 10.12.160.0/24;
			#deny all;
		}


		# deny access to files, starting with dot (hidden) or ending with ~ (temp)
		location ~ /\. {

			access_log off;
			log_not_found off;
			deny all;
		}

		location ~ ~$ {

			access_log off;
			log_not_found off;
			deny all;
		}

	}
}

